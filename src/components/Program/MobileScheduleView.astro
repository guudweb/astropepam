---
// Componente optimizado para vista móvil del programa
import type { WeekDay, Turno } from '../../types/program';

interface Props {
  days: string[];
  turnos: string[];
  weekDates: Date[];
}

const { days, turnos, weekDates } = Astro.props;
---

<!-- Vista Mobile del Programa -->
<div class="block lg:hidden">
  <!-- Selector de día para mobile -->
  <div class="mb-4">
    <select 
      id="mobileDaySelector" 
      class="w-full p-3 border border-gray-300 rounded-lg text-base focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
    >
      {days.map((day, index) => (
        <option value={day} data-index={index}>
          {day.charAt(0).toUpperCase() + day.slice(1)} - {weekDates[index].toLocaleDateString('es-ES', { 
            weekday: 'short', 
            day: 'numeric', 
            month: 'short' 
          })}
        </option>
      ))}
    </select>
  </div>

  <!-- Contenedor de días -->
  {days.map((day, dayIndex) => (
    <div 
      class="mobile-day-container" 
      data-day={day}
      style={dayIndex === 0 ? '' : 'display: none;'}
    >
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div class="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4">
          <h3 class="text-lg font-semibold">
            {day.charAt(0).toUpperCase() + day.slice(1)}
          </h3>
          <p class="text-blue-100 text-sm">
            {weekDates[dayIndex].toLocaleDateString('es-ES', { 
              weekday: 'long',
              day: 'numeric', 
              month: 'long',
              year: 'numeric'
            })}
          </p>
        </div>

        <div class="divide-y divide-gray-200">
          {turnos.map((turno) => (
            <div class="p-4">
              <div class="flex items-center justify-between mb-3">
                <h4 class="font-medium text-gray-900 text-base">
                  {turno}
                </h4>
                <span class="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
                  4 posiciones
                </span>
              </div>
              
              <!-- Grid de posiciones para mobile -->
              <div class="grid grid-cols-1 gap-3">
                {[...Array(4)].map((_, index) => (
                  <div class="relative">
                    <label class="block text-xs font-medium text-gray-700 mb-1">
                      Posición {index + 1}
                    </label>
                    <div class="flex items-center gap-2">
                      <select
                        class="flex-1 p-3 border border-gray-300 rounded-lg text-base bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 user-select"
                        data-day={day}
                        data-turno={turno}
                        data-index={index}
                        data-date={weekDates[dayIndex].toISOString().split("T")[0]}
                      >
                        <option value="">Sin asignar</option>
                        <option value="--separator--" disabled>Seleccionar usuario...</option>
                      </select>
                      <span 
                        class="flex-shrink-0 w-8 h-8 flex items-center justify-center text-lg"
                        id={`icon-${day}-${turno}-${index}`}
                      >
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  ))}
</div>

<script>
  // Manejo del selector de día en mobile
  document.addEventListener('DOMContentLoaded', () => {
    const daySelector = document.getElementById('mobileDaySelector') as HTMLSelectElement;
    const dayContainers = document.querySelectorAll('.mobile-day-container') as NodeListOf<HTMLElement>;

    if (daySelector && dayContainers.length > 0) {
      daySelector.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedDay = target.value;
        
        // Ocultar todos los contenedores
        dayContainers.forEach(container => {
          container.style.display = 'none';
        });
        
        // Mostrar el contenedor seleccionado
        const selectedContainer = document.querySelector(`[data-day="${selectedDay}"]`) as HTMLElement;
        if (selectedContainer) {
          selectedContainer.style.display = 'block';
        }
      });
    }
  });
</script>

<style>
  /* Optimización touch para mobile */
  .user-select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 0.7rem center;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
  }

  /* Animaciones suaves para cambio de vista */
  .mobile-day-container {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Mejorar contraste en selects */
  .user-select:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Estados de validación visual */
  .user-select[data-valid="true"] {
    border-color: #10b981;
    background-color: #f0fdf4;
  }

  .user-select[data-valid="false"] {
    border-color: #f59e0b;
    background-color: #fffbeb;
  }

  .user-select[data-valid="error"] {
    border-color: #ef4444;
    background-color: #fef2f2;
  }
</style>