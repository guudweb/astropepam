---
import Layout from "../../layouts/Layout.astro";
import { db, Usuario } from "astro:db";

const allUsers = await db.select().from(Usuario);

const getUsersForTurno = (day: string, turno: string) => {
  return allUsers
    .filter((user) => {
      const disponibilidad =
        typeof user.disponibilidad === "string"
          ? JSON.parse(user.disponibilidad)
          : {};
      return disponibilidad[day] && disponibilidad[day].includes(turno);
    })
    .map((user) => ({
      ...user,
      telefono: user.telefono,
    }));
};

const days = [
  //"lunes",
  "martes",
  "miercoles",
  "jueves",
  "viernes",
  "sabado",
  "domingo",
];
const turnos = ["T1", "T2", "T3", "T4"];

const usersDisponibilidad = {};

days.forEach((day) => {
  usersDisponibilidad[day] = {};
  turnos.forEach((turno) => {
    usersDisponibilidad[day][turno] = getUsersForTurno(day, turno);
  });
});

const getWeekDates = (weekOffset: number) => {
  const startOfWeek = new Date();
  startOfWeek.setDate(
    startOfWeek.getDate() - startOfWeek.getDay() + 1 + weekOffset * 7
  );
  const dates = [];
  for (let i = 0; i < 7; i++) {
    const date = new Date(startOfWeek);
    date.setDate(startOfWeek.getDate() + i);
    dates.push(date);
  }
  return dates;
};

let weekOffset = 0;
let weekDates = getWeekDates(weekOffset);
---

<Layout title="program">
  <div id="spinnerOverlay" class="spinner-overlay">
    <div class="spinner"></div>
  </div>
  <div class="container mx-auto mt-8 px-2 text-center">
    <div class="flex justify-between mb-5">
      <button
        class="bg-cyan-600 text-white px-4 py-2 ml-2 rounded h-fit"
        id="prevWeekBtn"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="icon icon-tabler icons-tabler-outline icon-tabler-chevrons-left"
          ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
            d="M11 7l-5 5l5 5"></path><path d="M17 7l-5 5l5 5"></path></svg
        >
      </button>

      <div class="flex gap-2">
        <a href="/program/CalenderView"
          ><button
            class="bg-green-500 text-white px-4 py-2 rounded"
            id="CalenderViewBtn"
          >
            Calendario
          </button></a
        >
      </div>

      <button
        class="bg-cyan-600 text-white px-4 py-2 mr-2 rounded h-fit"
        id="nextWeekBtn"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="icon icon-tabler icons-tabler-outline icon-tabler-chevrons-right"
          ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
            d="M7 7l5 5l-5 5"></path><path d="M13 7l5 5l-5 5"></path></svg
        >
      </button>
    </div>

    <div class="flex gap-2 mb-4 justify-center">
      <select
        id="preajustesSelect"
        class="border-2 border-black-500 ml-2 rounded-md text-sm text-center"
      >
        <option value="" selected>PreAjustes</option>
        <option value="cargar">Cargar Preajuste</option>
        <option value="guardar">Guardar Preajuste</option>
      </select>
      <button
        class="bg-cyan-600 text-white px-4 py-2 h-full rounded"
        id="saveBtn"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="icon icon-tabler icons-tabler-outline icon-tabler-device-floppy"
          ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
            d="M6 4h10l4 4v10a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2"
          ></path><path d="M12 14m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"
          ></path><path d="M14 4l0 4l-6 0l0 -4"></path></svg
        >
      </button>

      <a href="/user-history">
        <button class="bg-yellow-500 text-white px-4 py-2 rounded">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-tabler icons-tabler-outline icon-tabler-history"
            ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
              d="M12 8l0 4l2 2"></path><path
              d="M3.05 11a9 9 0 1 1 .5 4m-.5 5v-5h5"></path></svg
          >
        </button>
      </a>
    </div>

    <div id="currentView" class="grid justify-center">
      {
        days.map((day, dayIndex) => (
          <div class="mb-8">
            {" "}
            <h2 class="text-xl font-bold mb-4 week-date">
              {" "}
              {day.charAt(0).toUpperCase() + day.slice(1)} -{" "}
              {weekDates[dayIndex].toLocaleDateString()}{" "}
            </h2>{" "}
            <table>
              {" "}
              {turnos.map((turno) => (
                <tr>
                  {" "}
                  <td class="px-4 py-2 border-b">{turno}</td>{" "}
                  <td class="px-4 py-2 border-b">
                    {" "}
                    {[...Array(4)].map((_, index) => (
                      <div class="inline-block  mr-2">
                        {" "}
                        <select
                          class="border border-gray-300 focus:border-cyan-700 bg-white rounded-md w-64 px-1 py-2 my-1"
                          data-day={day}
                          data-turno={turno}
                          data-index={index}
                          data-date={
                            weekDates[dayIndex].toISOString().split("T")[0]
                          }
                        >
                          {" "}
                          {/* Opción para dejar el select vacío */}{" "}
                          {usersDisponibilidad[day][turno].map(
                            ({ nombre, Congregacion }) => (
                              <option
                                value={nombre}
                                data-congregacion-id={Congregacion}
                              >
                                {" "}
                                {nombre}{" "}
                              </option>
                            )
                          )}{" "}
                          <option value="add" id="add">
                            Añadir usuario
                          </option>{" "}
                          <option value="" />{" "}
                        </select>
                        <span
                          class="icon"
                          id={`icon-${day}-${turno}-${index}`}
                        />{" "}
                      </div>
                    ))}{" "}
                  </td>{" "}
                </tr>
              ))}{" "}
            </table>{" "}
          </div>
        ))
      }
    </div>
    <!-- Modal -->
    <div
      id="userModal"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden"
    >
      <div class="bg-white p-8 rounded shadow-lg">
        <h2 class="text-xl mb-4">Seleccionar Usuario</h2>
        <input
          type="text"
          id="userSearch"
          class="border border-gray-300 rounded px-2 py-1 mb-4"
          placeholder="Buscar usuario..."
        />

        <!-- Lista de botones de usuarios -->
        <ul id="userList" class="max-h-60 overflow-y-auto">
          <!-- Aquí se generarán los botones dinámicamente con los usuarios -->
          {
            allUsers.map((user) => (
              <li class="mb-2">
                <button
                  class="bg-cyan-600 text-white w-full px-2 py-1 rounded user-select-btn"
                  data-username={user.nombre}
                  data-congregacion-id={user.congregacion}
                >
                  {user.nombre}
                </button>
              </li>
            ))
          }
        </ul>

        <button
          class="mt-4 bg-red-500 text-white px-4 py-2 rounded"
          id="closeModalBtn"
        >
          Cerrar
        </button>
      </div>
    </div>

    <!-- Modal de confirmación -->
    <div
      id="confirmationModal"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden"
    >
      <div class="bg-white p-8 rounded mx-6 shadow-lg">
        <h2 class="text-xl mb-4">¿Guardar cambios?</h2>
        <p class="mb-4">¿Quieres guardar los cambios antes de continuar?</p>
        <div class="flex justify-end">
          <button
            id="cancelBtn"
            class="bg-red-500 text-white px-4 py-2 rounded mr-2"
          >
            No
          </button>
          <button
            id="saveBtnModal"
            class="bg-blue-500 text-white px-4 py-2 rounded"
          >
            Sí
          </button>
        </div>
      </div>
    </div>

    <!-- Popup de advertencia -->
    <div
      id="warningPopup"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden"
    >
      <div class="bg-white p-4 rounded shadow-lg">
        <h2 class="text-xl mb-4">Advertencia</h2>
        <p id="warningMessage"></p>
        <button
          class="mt-4 bg-red-500 text-white px-4 py-2 rounded"
          id="closeWarningBtn"
        >
          Cerrar
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  let currentDate = new Date();
  const days = [
    "lunes",
    "martes",
    "miercoles",
    "jueves",
    "viernes",
    "sabado",
    "domingo",
  ];

  // Function to load week data
  const loadWeekData = async () => {
    // Calculate the start date of the week
    const startOfWeek = new Date(currentDate);
    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1);

    try {
      // Show spinner
      spinnerOverlay.classList.add("active");

      const response = await fetch(
        `/api/getWeekData.json?date=${startOfWeek.toISOString().split("T")[0]}`
      );
      const currentWeekData = await response.json();
      document.querySelectorAll("select").forEach((select) => {
        const day = select.dataset.day;
        const turno = select.dataset.turno;
        const index = select.dataset.index;
        const value = currentWeekData[`${day}-${turno}-${index}`] || "";
        select.value = value;
      });

      // Hide spinner
      spinnerOverlay.classList.remove("active");
    } catch (error) {
      console.error("Error loading week data:", error);
      // Hide spinner in case of error
      spinnerOverlay.classList.remove("active");
    }
  };

  document
    .getElementById("preajustesSelect")
    .addEventListener("change", async (event) => {
      const target = event.target as HTMLSelectElement;
      const selectedOption = target.value;

      if (selectedOption === "guardar") {
        await savePreajustesData();
        notyf.success(`Preajuste guardado exitosamente`);
        //alert("Preajuste guardado exitosamente");
      } else if (selectedOption === "cargar") {
        const preajusteName = prompt(
          "Introduce el nombre del preajuste a cargar:"
        );
        if (preajusteName) {
          await loadPreajustesData(preajusteName);
          //alert("Preajuste cargado exitosamente");
          notyf.success(`Preajuste cargado exitosamente`);
        }
      }

      // Reset the select to the default option
      target.value = "";
    });

  //   // Function to load preajustes data
  const loadPreajustesData = async (
    preajusteName: string | number | boolean
  ) => {
    try {
      const response = await fetch(
        `/api/getPreajustesData.json?name=${encodeURIComponent(preajusteName)}`
      );
      const preajustesData = await response.json();
      document.querySelectorAll("select").forEach((select) => {
        const day = select.dataset.day;
        const turno = select.dataset.turno;
        const index = select.dataset.index;
        const value = preajustesData[`${day}-${turno}-${index}`] || "";
        select.value = value;
      });
    } catch (error) {
      console.error("Error loading preajustes data:", error);
    }
  };

  // // Set initial values of the selects based on fetched preajustes data
  // const preajustesData = await fetchPreajustesData("NombreDelPreajuste");

  // async function fetchPreajustesData(name: string | number | boolean) {
  //   try {
  //     const response = await fetch(
  //       `/api/getPreajustesData.json?name=${encodeURIComponent(name)}`
  //     );
  //     const data = await response.json();

  //     return data;
  //   } catch (error) {
  //     console.error("Error fetching preajustes data:", error);
  //     return {};
  //   }
  // }

  // Function to save week data
  const spinnerOverlay = document.getElementById("spinnerOverlay");

  // Function to save week data
  const saveWeekData = async () => {
    const currentWeekData = {};
    const startOfWeek = new Date(currentDate);
    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1);
    const weekDate = startOfWeek.toISOString().split("T")[0];

    const userHistoryPromises = [];

    document.querySelectorAll("select").forEach((select) => {
      const day = select.dataset.day;
      const turno = select.dataset.turno;
      const index = select.dataset.index;
      const userName = select.value;

      if (userName) {
        // Only save if a user is selected
        currentWeekData[`${day}-${turno}-${index}`] = userName;

        // Check if user history record already exists
        const userHistoryPromise = fetch(
          `/api/checkUserHistory.json?userName=${userName}&date=${weekDate}&day=${day}&turno=${turno}&indexValue=${index}`
        )
          .then((response) => response.json())
          .then((data) => {
            if (!data.exists) {
              // Save user selection to UserHistory table if it doesn't exist
              return fetch("/api/saveUserHistory.json", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  userName,
                  date: weekDate, // Use the week date
                  day,
                  turno,
                  indexValue: index,
                }),
              });
            }
          });

        userHistoryPromises.push(userHistoryPromise);
      }
    });

    // Show spinner
    spinnerOverlay.classList.add("active");

    // Wait for all user history checks and saves to complete
    await Promise.all(userHistoryPromises);

    // Save week data
    await fetch("/api/saveWeekData.json", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        date: weekDate, // Use the same week date
        weekData: currentWeekData,
      }),
    });

    // Hide spinner
    spinnerOverlay.classList.remove("active");
  };

  // Function to save preajustes data
  const savePreajustesData = async () => {
    const preajustesData = {};
    const preajusteName = "NombreDelPreajuste"; // Puedes cambiar esto según sea necesario

    document.querySelectorAll("select").forEach(async (select) => {
      const day = select.dataset.day;
      const turno = select.dataset.turno;
      const index = select.dataset.index;
      const userName = select.value;

      if (userName) {
        // Only save if a user is selected
        preajustesData[`${day}-${turno}-${index}`] = userName;

        // Save user selection to UserHistory table
        await fetch("/api/saveUserHistory.json", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            userName,
            date: new Date().toISOString().split("T")[0], // Use the current date
            day,
            turno,
            indexValue: index,
          }),
        });
      }
    });

    await fetch("/api/savePreajustesData.json", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        name: preajusteName, // Use the preajuste name
        preajusteData: preajustesData,
      }),
    });
  };

  // Function to update week dates in the UI
  const updateWeekDates = () => {
    const dates = getWeekDates(currentDate);
    document.querySelectorAll(".week-date").forEach((element, index) => {
      element.textContent = `${days[index].charAt(0).toUpperCase() + days[index].slice(1)} - ${dates[index].toLocaleDateString()}`;
    });
  };

  // Function to get week dates
  const getWeekDates = (currentDate: string | number | Date) => {
    const startOfWeek = new Date(currentDate);
    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1);
    const dates = [];
    for (let i = 0; i < 7; i++) {
      const date = new Date(startOfWeek);
      date.setDate(startOfWeek.getDate() + i);
      dates.push(date);
    }
    return dates;
  };

  // Buscador para el modal
  document.getElementById("userSearch").addEventListener("input", function () {
    const searchValue = (this as HTMLInputElement).value.toLowerCase();
    const userList = document.getElementById("userList");
    const users = userList.getElementsByTagName("li");

    Array.from(users).forEach((user) => {
      const userName = user
        .getElementsByTagName("button")[0]
        .dataset.username.toLowerCase();
      if (userName.includes(searchValue)) {
        user.style.display = "";
      } else {
        user.style.display = "none";
      }
    });
  });

  const prevWeekBtn = document.getElementById("prevWeekBtn");
  const nextWeekBtn = document.getElementById("nextWeekBtn");
  const saveBtn = document.getElementById("saveBtn");
  // Add event listeners for week navigation buttons
  prevWeekBtn.addEventListener("click", async () => {
    if (hasChanges()) {
      const shouldSave = await showConfirmationModal();
      if (shouldSave) {
        await saveWeekData();
      }
    }
    currentDate.setDate(currentDate.getDate() - 7);
    updateWeekDates();
    await loadWeekData();
    document.querySelectorAll("select").forEach((select) => {
      checkUserAssignment(select);
    });
    setInitialSelectValues();
  });

  nextWeekBtn.addEventListener("click", async () => {
    if (hasChanges()) {
      const shouldSave = await showConfirmationModal();
      if (shouldSave) {
        await saveWeekData();
      }
    }
    currentDate.setDate(currentDate.getDate() + 7);
    updateWeekDates();
    await loadWeekData();
    document.querySelectorAll("select").forEach((select) => {
      checkUserAssignment(select);
    });
    setInitialSelectValues();
  });

  import { Notyf } from "notyf";
  import "notyf/notyf.min.css";

  // Crear una instancia de Notyf
  const notyf = new Notyf({
    duration: 6000,
  });

  // Load week data when the DOM is fully loaded
  document.addEventListener("DOMContentLoaded", async () => {
    await loadWeekData();
    setTimeout(() => {
      document.querySelectorAll("select").forEach((select) => {
        const key = `${select.dataset.day}-${select.dataset.turno}-${select.dataset.index}`;
        initialSelectValues[key] = select.value;
      });
    }, 3000);

    // Set initial values of the selects based on fetched week data
    const weekData = await fetchWeekData(new Date());

    document.querySelectorAll("select").forEach((select) => {
      const day = select.dataset.day;
      const turno = select.dataset.turno;
      const index = select.dataset.index;

      if (weekData[`${day}-${turno}-${index}`]) {
        const value = weekData[`${day}-${turno}-${index}`];
        const optionExists = Array.from(select.options).some(
          (option) => option.value === value
        );

        if (!optionExists) {
          const newOption = document.createElement("option");
          newOption.value = value;
          newOption.text = value;
          select.appendChild(newOption);
        }

        select.value = value;
      }

      // Verificar si el select no está vacío
      if (select.value) {
        // Verificar si el usuario está en la lista de opciones del select
        const userName = select.value;
        const icon = document.getElementById(`icon-${day}-${turno}-${index}`);

        // Verificar si el usuario ya está asignado en otro turno de la semana
        const assignedTurns = [];
        document.querySelectorAll("select").forEach((otherSelect) => {
          if (otherSelect !== select && otherSelect.value === userName) {
            const otherDay = otherSelect.dataset.day;
            const otherTurno = otherSelect.dataset.turno;
            assignedTurns.push(`${otherDay} en el turno ${otherTurno}`);
          }
        });

        if (assignedTurns.length > 0) {
          icon.innerHTML += "⚠️"; // Icono para ya asignado
          // notyf.error(
          //   `El usuario ${userName} ya participa esta semana en ${assignedTurns.join(", ")}.`
          // );
        }
      }
    });
  });

  // Function to check user assignment
  function checkUserAssignment(select: HTMLSelectElement) {
    const userName = select.value;

    // Ignorar si el select está vacío (ningún usuario seleccionado)
    if (!userName) {
      return; // Si no hay usuario seleccionado, no hace nada y sale de la función
    }

    const day = select.dataset.day;
    const turno = select.dataset.turno;
    const index = select.dataset.index;
    const icon = document.getElementById(`icon-${day}-${turno}-${index}`);

    // Verificar si el usuario ya está asignado en otro turno de la semana
    const assignedTurns: string[] = [];
    document.querySelectorAll("select").forEach((otherSelect) => {
      if (otherSelect !== select && otherSelect.value === userName) {
        const otherDay = otherSelect.dataset.day;
        const otherTurno = otherSelect.dataset.turno;
        assignedTurns.push(`${otherDay} en el turno ${otherTurno}`);
      }
    });

    if (assignedTurns.length > 0) {
      if (icon) {
        icon.innerHTML = "⚠️"; // Icono para ya asignado
      }
      notyf.error(
        `El usuario ${userName} ya participa esta semana en ${assignedTurns.join(", ")}.`
      );
    } else {
      if (icon) {
        icon.innerHTML = ""; // Limpiar icono si no hay conflictos
      }
    }
  }

  // Agregar evento change fuera del evento DOMContentLoaded
  document.querySelectorAll("select").forEach((select) => {
    select.addEventListener("change", () => {
      if (select.value !== "add") {
        checkUserAssignment(select);
      }
    });
  });

  // Add event listener for save button
  saveBtn.addEventListener("click", async () => {
    try {
      await saveWeekData();
      notyf.success("Guardado correctamente");
    } catch (error) {
      notyf.error("Error al guardar los datos");
    }
  });

  // Set initial values of the selects based on fetched week data
  const weekData = await fetchWeekData(new Date());

  async function fetchWeekData(date: Date) {
    try {
      const response = await fetch(
        `/api/getWeekData.json?date=${date.toISOString().split("T")[0]}`
      );
      const data = await response.json();

      return data;
    } catch (error) {
      console.error("Error fetching week data:", error);
      return {};
    }
  }

  // Modal and user selection logic
  const modal = document.getElementById("userModal");
  const closeModalBtn = document.getElementById("closeModalBtn");
  const userSelectButtons = document.querySelectorAll(".user-select-btn");
  const addUserButtons = document.querySelectorAll("select");

  // Manejar la lógica de selección de la opción "add"
  document.querySelectorAll("select").forEach((select) => {
    select.addEventListener("change", (event) => {
      const target = event.target as HTMLSelectElement;
      const selectedOption = target.options[target.selectedIndex];

      if (selectedOption.id === "add") {
        const day = select.dataset.day;
        const turno = select.dataset.turno;
        const index = select.dataset.index;

        // Abrir el modal cuando se seleccione "Añadir usuario"
        modal.classList.remove("hidden");
        modal.dataset.day = day;
        modal.dataset.turno = turno;
        modal.dataset.index = index;

        // Agregar un evento de clic para cada botón de usuario en el modal
        const userButtons = document.querySelectorAll(
          "#userList .user-select-btn"
        );
        userButtons.forEach((button) => {
          button.addEventListener("click", function handleUserSelection(event) {
            const newUserName = button.getAttribute("data-username");

            if (newUserName) {
              // Actualizar el select con el nuevo nombre de usuario
              select.value = newUserName;

              // Verificar las asignaciones después de añadir un usuario
              checkUserAssignment(select);

              // Agregar el nuevo usuario al array assignedTurns
              const assignedTurns = [];
              document.querySelectorAll("select").forEach((otherSelect) => {
                if (
                  otherSelect !== select &&
                  otherSelect.value === newUserName
                ) {
                  const otherDay = otherSelect.dataset.day;
                  const otherTurno = otherSelect.dataset.turno;
                  assignedTurns.push(`${otherDay} en el turno ${otherTurno}`);
                }
              });

              // Cerrar el modal después de la selección
              modal.classList.add("hidden");

              // Eliminar el eventListener para evitar múltiples selecciones
              userButtons.forEach((btn) => {
                btn.removeEventListener("click", handleUserSelection);
              });
            }
          });
        });
      }
    });
  });

  closeModalBtn.addEventListener("click", () => {
    modal.classList.add("hidden");
  });

  userSelectButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      const userName = (target.dataset as DOMStringMap).username;
      const modal = document.getElementById("userModal") as HTMLElement;
      const day = (modal.dataset as DOMStringMap).day;
      const turno = (modal.dataset as DOMStringMap).turno;
      const index = (modal.dataset as DOMStringMap).index;
      const select = document.querySelector(
        `select[data-day="${day}"][data-turno="${turno}"][data-index="${index}"]`
      ) as HTMLSelectElement;
      const option = document.createElement("option");
      option.value = userName;
      option.text = userName;
      select.appendChild(option);
      select.value = userName;
      modal.classList.add("hidden");
    });
  });

  const warningPopup = document.getElementById("warningPopup");
  const warningMessage = document.getElementById("warningMessage");
  const closeWarningBtn = document.getElementById("closeWarningBtn");

  closeWarningBtn.addEventListener("click", () => {
    warningPopup.classList.add("hidden");
  });

  const showWarningPopup = (message: string) => {
    warningMessage.textContent = message;
    warningPopup.classList.remove("hidden");
  };

  // Lógica de selección de usuario
  userSelectButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      const userName = (target.dataset as DOMStringMap).username;
      const userCongregacionId = (target.dataset as DOMStringMap)
        .congregacionId;

      // Check if userCongregacionId is defined
      if (!userCongregacionId) {
        console.error("userCongregacionId is undefined:", target.dataset);
        return;
      }

      const modal = document.getElementById("userModal") as HTMLElement;
      const day = (modal.dataset as DOMStringMap).day;
      const turno = (modal.dataset as DOMStringMap).turno;
      const index = Number((modal.dataset as DOMStringMap).index);

      // Validate dataset values
      if (!day || !turno || !Number.isFinite(index)) {
        console.error("Invalid dataset values:", day, turno, index);
        return;
      }

      const select = document.querySelector(
        `select[data-day="${day}"][data-turno="${turno}"][data-index="${index}"]`
      ) as HTMLSelectElement;
      const option = document.createElement("option");
      option.value = userName;
      option.text = userName;
      select.appendChild(option);
      select.value = userName;

      // Fetch congregation details using the congregation ID
      fetch(
        `/api/getCongregacionDetails.json?congregacionId=${userCongregacionId}`
      )
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          return response.json();
        })
        .then((data) => {
          const congregacionName = data.nombre; // Assuming 'nombre' is the congregation name field
          if (data.diaReunion === day && data.turnoReunion === turno) {
            showWarningPopup(
              `El usuario ${userName} tiene reunión el ${day} en el turno ${turno} en la congregación ${congregacionName}.`
            );
          }
        })
        .catch((error) => {
          console.error("Fetch error:", error);
        });

      modal.classList.add("hidden");
    });
  });

  const confirmationModal = document.getElementById("confirmationModal");
  const cancelBtn = document.getElementById("cancelBtn");
  const saveBtnModal = document.getElementById("saveBtnModal");
  let initialSelectValues = {};

  async function showConfirmationModal() {
    return new Promise((resolve) => {
      confirmationModal.classList.remove("hidden");
      cancelBtn.onclick = () => {
        confirmationModal.classList.add("hidden");
        resolve(false);
      };
      saveBtnModal.onclick = async () => {
        confirmationModal.classList.add("hidden");
        await saveWeekData();
        resolve(true);
      };
    });
  }

  function hasChanges() {
    let changes = false;
    document.querySelectorAll("select").forEach((select) => {
      const key = `${select.dataset.day}-${select.dataset.turno}-${select.dataset.index}`;
      if (initialSelectValues[key] !== select.value) {
        changes = true;
      }
    });
    return changes;
  }

  function setInitialSelectValues() {
    setTimeout(() => {
      document.querySelectorAll("select").forEach((select) => {
        const key = `${select.dataset.day}-${select.dataset.turno}-${select.dataset.index}`;
        initialSelectValues[key] = select.value;
      });
    }, 1000);
  }
</script>

<style>
  .spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left-color: #0fa6fd;
    border-radius: 50%;
    width: 36px;
    height: 36px;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .spinner-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.8);
    justify-content: center;
    align-items: center;
    z-index: 9999; /* Ensure the spinner is on top of other elements */
  }

  .spinner-overlay.active {
    display: flex;
  }
</style>
