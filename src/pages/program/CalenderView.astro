---
import Layout from "../../layouts/Layout.astro";

const { isAdmin } = Astro.locals;
---

<Layout title="program">
  <div class="container mx-auto mt-8 text-center">
    <div class="flex justify-between mb-4">
      <button class="bg-blue-500 text-white px-4 py-2 rounded" id="prevWeekBtn">
        Semana Anterior
      </button>
      <button class="bg-blue-500 text-white px-4 py-2 rounded" id="nextWeekBtn">
        Semana Siguiente
      </button>
    </div>
    {
      isAdmin && (
        <a href="/program">
          <button
            class="bg-green-500 text-white px-4 py-2 rounded mb-4"
            id="CalenderViewBtn"
          >
            Program View
          </button>
        </a>
      )
    }
    <button onclick="saveTableAsPDF()">Save as PDF</button>

    <div id="calendarView" class="overflow-x-auto">
      <!-- The table will be dynamically generated by the script -->
    </div>
    <div
      id="phoneNumberPopup"
      class="hidden fixed bg-white border border-gray-200 p-2 rounded shadow-lg"
    >
    </div>
    <script is:inline>
      let currentDate = new Date(); // Define currentDate in the global scope
      const days = [
        "lunes",
        "martes",
        "miercoles",
        "jueves",
        "viernes",
        "sabado",
        "domingo",
      ];
      const turnos = ["T1", "T2", "T3", "T4"];
      const turnoTimes = {
        T1: "9:30 - 11:30",
        T2: "11:30 - 13:30",
        T3: "13:30 - 15:30",
        T4: "15:30 - 17:30",
      };

      const fetchWeekData = async (date) => {
        try {
          const response = await fetch(
            `/api/getWeekData.json?date=${date.toISOString().split("T")[0]}`
          );
          const data = await response.json();

          return data;
        } catch (error) {
          console.error("Error fetching week data:", error);
          return {};
        }
      };

      const fetchPhoneNumber = async (nombre) => {
        try {
          const response = await fetch(
            `/api/getUserPhoneNumber.json?nombre=${nombre}`
          );
          const data = await response.json();

          return data.telefono;
        } catch (error) {
          console.error("Error fetching phone number:", error);
          return "Phone number not available";
        }
      };

      const showPhoneNumber = (phoneNumber, event) => {
        const popup = document.getElementById("phoneNumberPopup");
        popup.innerText = phoneNumber;
        popup.style.top = `${event.clientY}px`;
        popup.style.left = `${event.clientX}px`;
        popup.classList.remove("hidden");
      };

      const hidePhoneNumber = () => {
        const popup = document.getElementById("phoneNumberPopup");
        popup.classList.add("hidden");
      };

      const updateWeek = async () => {
        const weekDates = getWeekDates(currentDate);
        const weekData = await fetchWeekData(currentDate);

        const calendarView = document.getElementById("calendarView");
        calendarView.innerHTML = `
  <div class="hidden md:block">
    <table id="desktopTable" class="min-w-full bg-white border border-gray-200 mb-4">
      <thead>
        <tr>
          <th class="px-4 py-2 border-b">Turno</th>
          ${weekDates
            .map((date, index) => {
              if (days[index] !== "lunes") {
                return `<th class="px-4 py-2 border-b">${formatDate(date, days[index])}</th>`;
              }
              return "";
            })
            .join("")}
        </tr>
      </thead>
      <tbody>
        ${turnos
          .map(
            (turno, turnoIndex) => `
          <tr class="${turnoIndex % 2 === 0 ? "bg-gray-100" : "bg-white"}">
            <td class="px-4 py-2 border-b">${turnoTimes[turno]}</td>
            ${days
              .map((day, dayIndex) => {
                if (day !== "lunes") {
                  const date = weekDates[dayIndex];
                  return `
                    <td class="px-4 py-2 border-b" data-day="${day}">
                      ${Array.from({ length: 4 })
                        .map((_, index) => {
                          const value =
                            weekData[`${day}-${turno}-${index}`] || "";
                          return `<div class="user" data-nombre="${value}" style="margin-bottom: 8px;">${value}</div>`;
                        })
                        .join("")}
                    </td>
                  `;
                }
                return "";
              })
              .join("")}
          </tr>
        `
          )
          .join("")}
      </tbody>
    </table>
  </div>
  <div class="md:hidden">
    ${days
      .map((day, dayIndex) => {
        if (day !== "lunes") {
          const date = weekDates[dayIndex];
          return `
            <div class="mb-4">
              <h2 class="text-lg font-bold mb-2">${day.charAt(0).toUpperCase() + day.slice(1)}</h2>
              <table class="min-w-full bg-white border border-gray-200 mb-4">
                <thead>
                  <tr>
                    <th class="px-4 py-2 border-b">Turno</th>
                    <th class="px-4 py-2 border-b">${formatDate(date, day)}</th>
                  </tr>
                </thead>
                <tbody>
                  ${turnos
                    .map(
                      (turno, turnoIndex) => `
                    <tr class="${turnoIndex % 2 === 0 ? "bg-gray-100" : "bg-white"}">
                      <td class="px-4 py-2 border-b">${turnoTimes[turno]}</td>
                      <td class="px-4 py-2 border-b">
                        ${Array.from({ length: 4 })
                          .map((_, index) => {
                            const value =
                              weekData[`${day}-${turno}-${index}`] || "";
                            return `<div class="user" data-nombre="${value}" style="margin-bottom: 8px;">${value}</div>`;
                          })
                          .join("")}
                      </td>
                    </tr>
                  `
                    )
                    .join("")}
                </tbody>
              </table>
            </div>
          `;
        }
        return "";
      })
      .join("")}
  </div>
`;

        document.querySelectorAll(".user").forEach((user) => {
          const userElement = user;
          userElement.addEventListener("click", async (event) => {
            const nombre = userElement.dataset.nombre;

            const phoneNumber = await fetchPhoneNumber(nombre);
            showPhoneNumber(phoneNumber, event);
          });
        });

        document.addEventListener("click", (event) => {
          const target = event.target;
          if (!target.classList.contains("user")) {
            hidePhoneNumber();
          }
        });
      };

      const getWeekDates = (currentDate) => {
        const startOfWeek = new Date(currentDate);
        startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1);
        const dates = [];
        for (let i = 0; i < 7; i++) {
          const date = new Date(startOfWeek);
          date.setDate(startOfWeek.getDate() + i);
          dates.push(date);
        }
        return dates;
      };

      const formatDate = (date, dayName) => {
        const day = date.getDate();
        return `${dayName.charAt(0).toUpperCase() + dayName.slice(1)} ${day}`;
      };

      document.addEventListener("DOMContentLoaded", () => {
        const prevWeekBtn = document.getElementById("prevWeekBtn");
        const nextWeekBtn = document.getElementById("nextWeekBtn");

        prevWeekBtn.addEventListener("click", () => {
          currentDate.setDate(currentDate.getDate() - 7);
          updateWeek();
        });
        nextWeekBtn.addEventListener("click", () => {
          currentDate.setDate(currentDate.getDate() + 7);
          updateWeek();
        });

        // Initial load
        updateWeek();
      });

      const saveTableAsPDF = () => {
        const { jsPDF } = window.jspdf;

        // Mostrar temporalmente la tabla de escritorio en la vista móvil
        const desktopTableWrapper =
          document.querySelector("#desktopTable").parentElement;

        // Guardar el estado original de la tabla
        const originalDisplay = desktopTableWrapper.style.display;

        // Forzar que la tabla de escritorio sea visible
        desktopTableWrapper.style.display = "block";

        const doc = new jsPDF({
          orientation: "landscape",
          unit: "px",
          format: "a4",
        });

        // Seleccionar la tabla de escritorio
        const table = document.querySelector("#desktopTable");

        if (!table) {
          alert("La tabla de escritorio no está disponible.");
          desktopTableWrapper.style.display = originalDisplay; // Restaurar el estado original
          return;
        }

        // Obtener encabezados y filas de la tabla de escritorio
        const headers = Array.from(table.querySelectorAll("thead th")).map(
          (th) => th.innerText
        );
        const rows = Array.from(table.querySelectorAll("tbody tr")).map((tr) =>
          Array.from(tr.querySelectorAll("td")).map((td) => {
            const names = td.innerText.split("\n"); // Dividir nombres por saltos de línea
            return names.join("\n\n"); // Agregar separación adicional en el PDF
          })
        );

        // Generar el PDF
        doc.autoTable({
          head: [headers],
          body: rows,
          startY: 20,
          margin: { top: 10, right: 10, bottom: 10, left: 10 },
          theme: "grid",
          styles: {
            fontSize: 9,
            cellPadding: 8,
            halign: "center",
            valign: "middle",
            fillColor: [255, 255, 255],
            textColor: [0, 0, 0],
            lineWidth: 0.1,
          },
          headStyles: {
            fillColor: [6, 2, 112],
            textColor: [255, 255, 255],
            fontStyle: "bold",
            cellPadding: 6,
          },
          alternateRowStyles: {
            fillColor: [226, 234, 244],
          },
          tableLineColor: [0, 0, 0],
          tableLineWidth: 0.1,
        });

        // Descargar el PDF
        doc.save("calendar.pdf");

        // Ocultar la tabla de escritorio nuevamente
        desktopTableWrapper.style.display = originalDisplay;
      };
    </script>
  </div>
</Layout>

<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"
></script>

<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"
></script>
<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"
></script>

<!-- <script is:inline>
  const saveDivAsPDF = () => {
    const element = document.querySelector(".md\\:block"); // Select the desktop view
    element.classList.add("pdf-content"); // Add the CSS class to the element

    const opt = {
      margin: [20, 10, 0, 10], // Add margins (top, right, bottom, left)
      filename: "calendar.pdf",
      image: { type: "jpeg", quality: 1.0 }, // Increase the quality
      html2canvas: { scale: 2 }, // Adjust the scale to increase quality
      jsPDF: { unit: "px", format: [1366, 546], orientation: "landscape" },
    };

    // Use html2pdf to generate the PDF
    html2pdf().from(element).set(opt).save();
  };
</script>

<style>
  .pdf-content {
    border: 2px solid black; /* Adjust the border size and color as needed */
    padding: 10px; /* Add padding to create space between the content and the border */
    text-align: center; /* Center the text */
  }
</style> -->
