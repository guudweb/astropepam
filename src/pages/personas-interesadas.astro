---
import {
  db,
  PersonasInteresadas as PersonasInteresadasDB,
  Usuario as UsuarioDB,
  Congregacion as CongregacionDB,
  eq,
} from "astro:db";

import { or } from "astro:db";

import Layout from "../layouts/Layout.astro";

// Helper to fetch user details
async function getUserDetailsByName(userName: string) {
  const userDetails = await db
    .select()
    .from(UsuarioDB)
    .where(eq(UsuarioDB.nombre, userName))
    .execute();

  return userDetails[0] || null; // Return the first match or null if not found
}

// Example usage: Get user details
const loggedInUserName = Astro.locals.user?.name || ""; // Replace with actual logged-in user data
const userDetails = loggedInUserName
  ? await getUserDetailsByName(loggedInUserName)
  : null;

// Determine if the user is an admin and extract serviceLink
const isAdmin = Astro.locals.isAdmin;
const serviceLink = userDetails?.service_link || false;
const user = Astro.locals.user; // Get the user object for ID comparison

// Fetch personas interesadas data
let personasInteresadasData: any[] = [];
if (isAdmin) {
  // Admin: Fetch all records with names
  personasInteresadasData = await db
    .select({
      id: PersonasInteresadasDB.id,
      nombre: PersonasInteresadasDB.nombre,
      telefono: PersonasInteresadasDB.telefono,
      abordado_por: PersonasInteresadasDB.abordado_por,
      congregacion: CongregacionDB.nombre,
      atendido: PersonasInteresadasDB.atendido,
      añadido_por: UsuarioDB.nombre,
      añadido_por_id: PersonasInteresadasDB.añadido_por,
      comentarios: PersonasInteresadasDB.comentarios,
    })
    .from(PersonasInteresadasDB)
    .leftJoin(
      UsuarioDB,
      eq(PersonasInteresadasDB.añadido_por, UsuarioDB.user_id)
    )
    .leftJoin(
      CongregacionDB,
      eq(PersonasInteresadasDB.congregacion, CongregacionDB.id)
    )
    .execute();
} else if (serviceLink && userDetails?.congregacion) {
  // Service link and captain: Fetch both congregation and user's added records
  personasInteresadasData = await db
    .select({
      id: PersonasInteresadasDB.id,
      nombre: PersonasInteresadasDB.nombre,
      telefono: PersonasInteresadasDB.telefono,
      abordado_por: PersonasInteresadasDB.abordado_por,
      congregacion: CongregacionDB.nombre,
      atendido: PersonasInteresadasDB.atendido,
      añadido_por: UsuarioDB.nombre,
      añadido_por_id: PersonasInteresadasDB.añadido_por,
      comentarios: PersonasInteresadasDB.comentarios,
    })
    .from(PersonasInteresadasDB)
    .leftJoin(
      UsuarioDB,
      eq(PersonasInteresadasDB.añadido_por, UsuarioDB.user_id)
    )
    .leftJoin(
      CongregacionDB,
      eq(PersonasInteresadasDB.congregacion, CongregacionDB.id)
    )
    .where(
      or(
        eq(PersonasInteresadasDB.congregacion, userDetails.congregacion),
        eq(UsuarioDB.nombre, userDetails.nombre)
      )
    )
    .execute();
} else if (userDetails) {
  // Captain only: Fetch only records added by the user
  personasInteresadasData = await db
    .select({
      id: PersonasInteresadasDB.id,
      nombre: PersonasInteresadasDB.nombre,
      telefono: PersonasInteresadasDB.telefono,
      abordado_por: PersonasInteresadasDB.abordado_por,
      congregacion: CongregacionDB.nombre,
      atendido: PersonasInteresadasDB.atendido,
      añadido_por: UsuarioDB.nombre,
      añadido_por_id: PersonasInteresadasDB.añadido_por,
      comentarios: PersonasInteresadasDB.comentarios,
    })
    .from(PersonasInteresadasDB)
    .leftJoin(
      UsuarioDB,
      eq(PersonasInteresadasDB.añadido_por, UsuarioDB.user_id)
    )
    .leftJoin(
      CongregacionDB,
      eq(PersonasInteresadasDB.congregacion, CongregacionDB.id)
    )
    .where(eq(UsuarioDB.nombre, userDetails.nombre)) // Only records added by the user
    .execute();
} else {
  // No permissions: Return no data
  personasInteresadasData = [];
}

// Helper to handle checkbox change
async function handleCheckboxChange(personaId: number, checked: boolean) {
  // Send POST request to update 'atendido' in the database
  await fetch("/update-atendido", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      personaId: personaId,
      atendido: checked,
    }),
  });
}

// Pasa los datos al frontend usando `Astro.props`
export { personasInteresadasData };
---

<Layout title="Personas Interesadas">
  <div class="container mx-auto mt-8 px-4">
    <h1 class="text-2xl text-gray-800 mb-6 text-center">
      Personas Interesadas
    </h1>

    <div class="overflow-x-auto">
      <table
        class="min-w-full bg-white border border-gray-300 shadow-lg rounded-lg hidden md:table"
      >
        <!-- Table for Desktop View -->
        <thead>
          <tr>
            <th
              class="px-4 py-3 border-b text-left font-semibold text-gray-700"
            >
              Nombre
            </th>
            <th
              class="px-4 py-3 border-b text-left font-semibold text-gray-700"
            >
              Teléfono
            </th>
            <th
              class="px-4 py-3 border-b text-left font-semibold text-gray-700"
            >
              Abordado Por
            </th>
            <th
              class="px-4 py-3 border-b text-left font-semibold text-gray-700"
            >
              Congregación
            </th>
            <th
              class="px-4 py-3 border-b text-left font-semibold text-gray-700"
            >
              Atendido
            </th>
            <th
              class="px-4 py-3 border-b text-left font-semibold text-gray-700"
            >
              Añadido Por
            </th>
            <th
              class="px-4 py-3 border-b text-left font-semibold text-gray-700"
            >
              Comentarios
            </th>
          </tr>
        </thead>
        <tbody>
          {
            personasInteresadasData
              .filter((persona) => {
                // Solo mostrar a personas no atendidas o si el usuario es admin
                return isAdmin || !persona.atendido;
              })
              .map((persona) => (
                <tr
                  data-persona-id={persona.id}
                  class={`bg-gray-50 hover:bg-gray-100 ${
                    persona.atendido ? "bg-gray-300" : ""
                  }`}
                >
                  <td class="px-4 py-2 border-b text-gray-800">
                    {persona.nombre}
                  </td>
                  <td class="px-4 py-2 border-b text-gray-800">
                    {persona.telefono}
                  </td>
                  <td class="px-4 py-2 border-b text-gray-800">
                    {persona.abordado_por}
                  </td>
                  <td class="px-4 py-2 border-b text-gray-800">
                    {persona.congregacion}
                  </td>
                  <td class="px-4 py-2 border-b text-gray-800">
                    {isAdmin || serviceLink ? (
                      <>
                        <span
                          id={`desktop-atendido-status-${persona.id}`}
                          class="mr-2"
                        >
                          {persona.atendido ? "Sí" : "No"}
                        </span>
                        <input
                          type="checkbox"
                          name="atendido"
                          checked={persona.atendido}
                          class="mr-2"
                          data-persona-id={persona.id}
                          data-view="desktop"
                        />
                      </>
                    ) : persona.atendido ? (
                      "Sí"
                    ) : (
                      "No"
                    )}
                  </td>

                  <td class="px-4 py-2 border-b text-gray-800">
                    {persona.añadido_por}
                  </td>
                  <td class="px-4 py-2 border-b text-gray-800">
                    {persona.comentarios}
                  </td>
                  <td class="px-4 py-2 border-b text-gray-800">
                    {(isAdmin || persona.añadido_por_id === user?.id) && (
                      <a
                        href={`/editar-persona-interesada/${persona.id}`}
                        class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 mr-2"
                      >
                        Editar
                      </a>
                    )}
                    {isAdmin && (
                      <button
                        class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                        data-persona-id={persona.id}
                        data-action="delete"
                      >
                        Eliminar
                      </button>
                    )}
                  </td>
                </tr>
              ))
          }
        </tbody>
      </table>

      <!-- Table for Mobile View -->
      <div class="grid grid-cols-1 gap-4 md:hidden">
        {
          personasInteresadasData
            .filter((persona) => isAdmin || !persona.atendido) // Only show unaddressed personas for non-admins
            .map((persona) => (
              <div
                data-persona-id={persona.id}
                class={`bg-white border border-gray-300 shadow-md rounded-lg p-4 ${
                  persona.atendido ? "bg-gray-100" : ""
                }`}
              >
                <p class="text-gray-800 font-semibold mb-2">
                  <span class="block">Nombre: {persona.nombre}</span>
                  <span class="block">Teléfono: {persona.telefono}</span>
                </p>
                <p class="text-gray-700 mb-2">
                  Abordado Por: {persona.abordado_por}
                </p>
                <p class="text-gray-700 mb-2">
                  Congregación asignada: {persona.congregacion}
                </p>
                <p class="text-gray-700 mb-2">
                  Atendido:{" "}
                  {isAdmin || serviceLink ? (
                    <>
                      <span
                        id={`mobile-atendido-status-${persona.id}`}
                        class="mr-2"
                      >
                        {persona.atendido ? "Sí" : "No"}
                      </span>
                      <input
                        type="checkbox"
                        name="atendido"
                        checked={persona.atendido}
                        class="mr-2"
                        data-persona-id={persona.id}
                        data-view="mobile"
                      />
                    </>
                  ) : persona.atendido ? (
                    "Sí"
                  ) : (
                    "No"
                  )}
                </p>
                <p class="text-gray-700 mb-2">
                  Añadido Por: {persona.añadido_por}
                </p>
                <p class="text-gray-700">Comentarios: {persona.comentarios}</p>

                {(isAdmin || persona.añadido_por_id === user?.id) && (
                  <div class="flex gap-2 mt-4">
                    <a
                      href={`/editar-persona-interesada/${persona.id}`}
                      class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 w-full text-center"
                    >
                      Editar
                    </a>
                    {isAdmin && (
                      <button
                        class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 w-full"
                        data-persona-id={persona.id}
                        data-action="delete"
                      >
                        Eliminar
                      </button>
                    )}
                  </div>
                )}
              </div>
            ))
        }
      </div>
    </div>
  </div>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      const checkboxes = document.querySelectorAll('input[type="checkbox"]');

      checkboxes.forEach((checkbox) => {
        checkbox.addEventListener("change", async (event) => {
          const personaId = event.target.dataset.personaId;
          const checked = event.target.checked;

          // Show confirmation modal
          const confirmAction = await showModal(
            "Confirmar acción",
            `¿Estás seguro de que quieres marcar como ${
              checked ? "atendido" : "no atendido"
            } esta persona?`
          );

          if (confirmAction) {
            try {
              // Call the backend API to update 'atendido'
              const response = await fetch("/api/update-atendido.json", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  personaId: personaId,
                  atendido: checked,
                }),
              });

              if (response.ok) {
                console.log("Atendido status updated successfully");

                // Dynamically update the status text and checkbox for both views
                const desktopStatusText = document.getElementById(
                  `desktop-atendido-status-${personaId}`
                );
                const mobileStatusText = document.getElementById(
                  `mobile-atendido-status-${personaId}`
                );

                const desktopCheckbox = document.querySelector(
                  `input[data-persona-id="${personaId}"][data-view="desktop"]`
                );
                const mobileCheckbox = document.querySelector(
                  `input[data-persona-id="${personaId}"][data-view="mobile"]`
                );

                // Update text content
                if (desktopStatusText) {
                  desktopStatusText.textContent = checked ? "Sí" : "No";
                }
                if (mobileStatusText) {
                  mobileStatusText.textContent = checked ? "Sí" : "No";
                }

                // Synchronize checkbox state
                if (desktopCheckbox) {
                  desktopCheckbox.checked = checked;
                }
                if (mobileCheckbox) {
                  mobileCheckbox.checked = checked;
                }
              } else {
                console.error("Error updating atendido status");
                event.target.checked = !checked; // Revert the checkbox if API call fails
              }
            } catch (error) {
              console.error("Error during update:", error);
              event.target.checked = !checked; // Revert the checkbox if there's an error
            }
          } else {
            event.target.checked = !checked; // Revert the checkbox if user cancels
          }
        });
      });

      // Function to show modal and return user's confirmation
      function showModal(title, message) {
        return new Promise((resolve) => {
          const modalOverlay = document.createElement("div");
          modalOverlay.className =
            "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";

          const modal = document.createElement("div");
          modal.className =
            "bg-white rounded-lg shadow-lg p-6 max-w-sm w-full text-center";

          const modalTitle = document.createElement("h2");
          modalTitle.className = "text-lg font-bold mb-4";
          modalTitle.textContent = title;

          const modalMessage = document.createElement("p");
          modalMessage.className = "text-gray-700 mb-6";
          modalMessage.textContent = message;

          const buttonContainer = document.createElement("div");
          buttonContainer.className = "flex justify-end gap-2";

          const confirmButton = document.createElement("button");
          confirmButton.className =
            "bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600";
          confirmButton.textContent = "Sí";

          const cancelButton = document.createElement("button");
          cancelButton.className =
            "bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400";
          cancelButton.textContent = "No";

          buttonContainer.appendChild(confirmButton);
          buttonContainer.appendChild(cancelButton);
          modal.appendChild(modalTitle);
          modal.appendChild(modalMessage);
          modal.appendChild(buttonContainer);
          modalOverlay.appendChild(modal);
          document.body.appendChild(modalOverlay);

          confirmButton.addEventListener("click", () => {
            resolve(true);
            document.body.removeChild(modalOverlay);
          });

          cancelButton.addEventListener("click", () => {
            resolve(false);
            document.body.removeChild(modalOverlay);
          });
        });
      }

      // Function to handle the deletion of a persona
      const handleDelete = async (personaId) => {
        const confirmDelete = await showModal(
          "Confirmar eliminación",
          "¿Estás seguro de que quieres eliminar esta persona?"
        );

        if (confirmDelete) {
          try {
            const response = await fetch(
              "/api/delete-persona-interesada.json",
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ personaId }),
              }
            );

            if (response.ok) {
              console.log("Persona deleted successfully");

              // Remove the deleted persona from the view dynamically
              const row = document.querySelector(
                `tr[data-persona-id="${personaId}"]`
              );
              const card = document.querySelector(
                `div[data-persona-id="${personaId}"]`
              );
              if (row) row.remove();
              if (card) card.remove();
            } else {
              console.error("Error deleting persona");
            }
          } catch (error) {
            console.error("Error during delete:", error);
          }
        }
      };

      // Add event listeners for edit and delete buttons
      document.addEventListener("click", (event) => {
        const button = event.target.closest('button[data-action="delete"]');
        if (button) {
          const personaId = button.dataset.personaId;
          handleDelete(personaId);
        }
      });
    });
  </script>
</Layout>
