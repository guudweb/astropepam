---
import Layout from "../layouts/Layout.astro"
import { db, Usuario, WeekData, eq } from 'astro:db';

const allUsers = await db.select().from(Usuario);

const getUsersForTurno = (day, turno) => {
  return allUsers.filter(user => {
    const disponibilidad = typeof user.disponibilidad === 'string' ? JSON.parse(user.disponibilidad) : {};
    return disponibilidad[day] && disponibilidad[day].includes(turno);
  });
};

const days = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado', 'domingo'];
const turnos = ['T1', 'T2', 'T3', 'T4'];

const usersDisponibilidad = {};

days.forEach(day => {
  usersDisponibilidad[day] = {};
  turnos.forEach(turno => {
    usersDisponibilidad[day][turno] = getUsersForTurno(day, turno);
  });
});

const getWeekDates = (weekOffset) => {
  const startOfWeek = new Date();
  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1 + (weekOffset * 7));
  const dates = [];
  for (let i = 0; i < 7; i++) {
    const date = new Date(startOfWeek);
    date.setDate(startOfWeek.getDate() + i);
    dates.push(date);
  }
  return dates;
};

let weekOffset = 0;
let weekDates = getWeekDates(weekOffset);
---

<Layout title="program">
  <div class="container mx-auto mt-8 text-center">
    <div class="flex justify-between mb-4">
      <button 
        class="bg-blue-500 text-white px-4 py-2 rounded" 
        id="prevWeekBtn"
      >
        Semana Anterior
      </button>
      <button 
        class="bg-blue-500 text-white px-4 py-2 rounded" 
        id="nextWeekBtn"
      >
        Semana Siguiente
      </button>
    </div>
    {days.map((day, index) => (
      <div key={day} class="mb-8">
        <h2 class="text-xl font-bold mb-4 week-date">
          {day.charAt(0).toUpperCase() + day.slice(1)} - {weekDates[index].toLocaleDateString()}
        </h2>
        <table class="min-w-full bg-white border border-gray-200 mb-4">
          <thead>
            <tr>
              <th class="px-4 py-2 border-b">Turno</th>
              <th class="px-4 py-2 border-b">Usuarios Disponibles</th>
            </tr>
          </thead>
          <tbody>
            {turnos.map(turno => (
              <tr key={turno}>
                <td class="px-4 py-2 border-b">{turno}</td>
                <td class="px-4 py-2 border-b">
                  {[...Array(4)].map((_, index) => (
                    <div key={index} class="inline-block mr-2">
                      <select class="border border-gray-300 rounded px-2 py-1" data-day={day} data-turno={turno} data-index={index}>
                        {usersDisponibilidad[day][turno].length > 0 ? (
                          usersDisponibilidad[day][turno].map(({ nombre }) => (
                            <option value={nombre} key={nombre}>{nombre}</option>
                          ))
                        ) : (
                          <option value="">No disponible</option>
                        )}
                        <option value="add">Añadir usuario</option>
                      </select>
                    </div>
                  ))}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    ))}
  </div>

  <!-- Modal -->
  <div id="userModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white p-4 rounded shadow-lg">
      <h2 class="text-xl mb-4">Seleccionar Usuario</h2>
      <ul id="userList" class="max-h-60 overflow-y-auto">
        {allUsers.map(user => (
          <li key={user.user_id} class="mb-2">
            <button 
              class="bg-blue-500 text-white px-2 py-1 rounded user-select-btn" 
              data-username={user.nombre}
            >
              {user.nombre}
            </button>
          </li>
        ))}
      </ul>
      <button 
        class="mt-4 bg-red-500 text-white px-4 py-2 rounded" 
        id="closeModalBtn"
      >
        Cerrar
      </button>
    </div>
  </div>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', () => {
  let weekOffset = 0;
  const days = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado', 'domingo'];

  const modal = document.getElementById('userModal');
  const closeModalBtn = document.getElementById('closeModalBtn');
  const userSelectButtons = document.querySelectorAll('.user-select-btn');
  const addUserButtons = document.querySelectorAll('select');
  const prevWeekBtn = document.getElementById('prevWeekBtn');
  const nextWeekBtn = document.getElementById('nextWeekBtn');

  const getWeekDates = (weekOffset) => {
    const startOfWeek = new Date();
    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1 + (weekOffset * 7));
    const dates = [];
    for (let i = 0; i < 7; i++) {
      const date = new Date(startOfWeek);
      date.setDate(startOfWeek.getDate() + i);
      dates.push(date);
    }
    return dates;
  };

  const updateWeekDates = () => {
    const dates = getWeekDates(weekOffset);
    document.querySelectorAll('.week-date').forEach((element, index) => {
      element.textContent = `${days[index].charAt(0).toUpperCase() + days[index].slice(1)} - ${dates[index].toLocaleDateString()}`;
    });
  };

  const loadWeekData = async () => {
    const response = await fetch(`/api/getWeekData.json?weekOffset=${weekOffset}`);
    const currentWeekData = await response.json();
    document.querySelectorAll('select').forEach(select => {
      const day = select.dataset.day;
      const turno = select.dataset.turno;
      const index = select.dataset.index;
      const value = currentWeekData[`${day}-${turno}-${index}`] || '';
      select.value = value;
    });
  };

  const saveWeekData = async () => {
    const currentWeekData = {};
    document.querySelectorAll('select').forEach(select => {
      const day = select.dataset.day;
      const turno = select.dataset.turno;
      const index = select.dataset.index;
      currentWeekData[`${day}-${turno}-${index}`] = select.value;
    });

    await fetch('/api/saveWeekData.json', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ weekOffset, weekData: currentWeekData }),
    });
  };

  prevWeekBtn.addEventListener('click', async () => {
    await saveWeekData();
    weekOffset -= 1;
    updateWeekDates();
    await loadWeekData();
  });

  nextWeekBtn.addEventListener('click', async () => {
    await saveWeekData();
    weekOffset += 1;
    updateWeekDates();
    await loadWeekData();
  });

  addUserButtons.forEach(select => {
    select.addEventListener('change', (event) => {
      if (event.target.value === 'add') {
        const day = select.dataset.day;
        const turno = select.dataset.turno;
        const index = select.dataset.index;
        modal.classList.remove('hidden');
        modal.dataset.day = day;
        modal.dataset.turno = turno;
        modal.dataset.index = index;
      }
    });
  });

  closeModalBtn.addEventListener('click', () => {
    modal.classList.add('hidden');
  });

  userSelectButtons.forEach(button => {
    button.addEventListener('click', (event) => {
      const userName = event.target.dataset.username;
      const day = modal.dataset.day;
      const turno = modal.dataset.turno;
      const index = modal.dataset.index;
      
      const select = document.querySelector(`select[data-day="${day}"][data-turno="${turno}"][data-index="${index}"]`);
      const option = document.createElement('option');
      option.value = userName;
      option.text = userName;
      select.appendChild(option);
      select.value = userName;

      modal.classList.add('hidden');
    });
  });

  // Load week data when the page loads
  window.addEventListener('load', async () => {
    updateWeekDates();
    await loadWeekData();
  });
});


</script>
