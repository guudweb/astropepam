---
import Layout from "../../layouts/Layout.astro"

const days = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado', 'domingo'];
const turnos = ['T1', 'T2', 'T3', 'T4'];

const getWeekDates = (weekOffset: number) => {
  const startOfWeek = new Date();
  startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1 + (weekOffset * 7));
  const dates = [];
  for (let i = 0; i < 7; i++) {
    const date = new Date(startOfWeek);
    date.setDate(startOfWeek.getDate() + i);
    dates.push(date);
  }
  return dates;
};

let weekOffset = 0;
let weekDates = getWeekDates(weekOffset);

const fetchWeekData = async (weekOffset: number) => {
  try {
    const response = await fetch(`http://localhost:4321/api/getWeekData.json?weekOffset=${weekOffset}`);
    const data = await response.json();
    //console.log(data); // Log the data to check its structure
    return data;
  } catch (error) {
    console.error('Error fetching week data:', error);
    return {};
  }
};

// Example weekOffset value
const currentWeekData = await fetchWeekData(weekOffset);
//const day = 'Monday'; // Example day value
//const turno = 'morning'; // Example turno value

const formatDate = (date: { getDate: () => any; }, dayName: string) => {
        const day = date.getDate();
        return `${dayName.charAt(0).toUpperCase() + dayName.slice(1)} ${day}`;
      };
---

<Layout title="program">
  <div class="container mx-auto mt-8 text-center">
    <div class="flex justify-between mb-4">
      <button class="bg-blue-500 text-white px-4 py-2 rounded" id="prevWeekBtn">
        Semana Anterior
      </button>
      <button class="bg-blue-500 text-white px-4 py-2 rounded" id="nextWeekBtn">
        Semana Siguiente
      </button>
    </div>
    <a href="/program">
      <button class="bg-green-500 text-white px-4 py-2 rounded mb-4" id="CalenderViewBtn">
        Program View
      </button>
    </a>

    <!-- Navigation buttons for mobile view 
    <div id="day-buttons" class="flex justify-around mb-4 md:hidden">
      <button class="day-btn bg-blue-500 text-white px-2 py-1 rounded" data-day="lunes">Lunes</button>
      <button class="day-btn bg-blue-500 text-white px-2 py-1 rounded" data-day="martes">Martes</button>
      <button class="day-btn bg-blue-500 text-white px-2 py-1 rounded" data-day="miércoles">Miércoles</button>
      <button class="day-btn bg-blue-500 text-white px-2 py-1 rounded" data-day="jueves">Jueves</button>
      <button class="day-btn bg-blue-500 text-white px-2 py-1 rounded" data-day="viernes">Viernes</button>
      <button class="day-btn bg-blue-500 text-white px-2 py-1 rounded" data-day="sábado">Sábado</button>
      <button class="day-btn bg-blue-500 text-white px-2 py-1 rounded" data-day="domingo">Domingo</button>
    </div> -->

    <div id="calendarView" class="overflow-x-auto">
      <!-- The table will be dynamically generated by the script -->
    </div>
  </div>

  <script>
    let weekOffset = 0; // Define weekOffset in the global scope

    const days = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado', 'domingo'];
    const turnos = ['T1', 'T2', 'T3', 'T4'];

    const getWeekDates = (weekOffset) => {
      const startOfWeek = new Date();
      startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1 + (weekOffset * 7));
      const dates = [];
      for (let i = 0; i < 7; i++) {
        const date = new Date(startOfWeek);
        date.setDate(startOfWeek.getDate() + i);
        dates.push(date);
      }
      return dates;
    };

    const fetchWeekData = async (weekOffset) => {
      try {
        const response = await fetch(`/api/getWeekData.json?weekOffset=${weekOffset}`);
        const data = await response.json();
        return data;
      } catch (error) {
        console.error('Error fetching week data:', error);
        return {};
      }
    };

    const formatDate = (date, dayName) => {
      const day = date.getDate();
      return `${dayName.charAt(0).toUpperCase() + dayName.slice(1)} ${day}`;
    };

    const updateWeek = async () => {
      const weekDates = getWeekDates(weekOffset);
      const weekData = await fetchWeekData(weekOffset);
      const calendarView = document.getElementById('calendarView');
      calendarView.innerHTML = `
        <div class="hidden md:block">
          <table class="min-w-full bg-white border border-gray-200 mb-4">
            <thead>
              <tr>
                <th class="px-4 py-2 border-b">Turno</th>
                ${weekDates.map((date, index) => `<th class="px-4 py-2 border-b">${formatDate(date, days[index])}</th>`).join('')}
              </tr>
            </thead>
            <tbody>
              ${turnos.map(turno => `
                <tr>
                  <td class="px-4 py-2 border-b">${turno}</td>
                  ${days.map(day => `
                    <td class="px-4 py-2 border-b" data-day="${day}">
                      ${Array.from({ length: 4 }).map((_, index) => {
                        const value = weekData[`${day}-${turno}-${index}`] || '';
                        return `<div>${value}</div>`;
                      }).join('')}
                    </td>
                  `).join('')}
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
        <div class="md:hidden">
          ${days.map(day => `
            <div class="mb-4">
              <h2 class="text-lg font-bold mb-2">${day.charAt(0).toUpperCase() + day.slice(1)}</h2>
              <table class="min-w-full bg-white border border-gray-200 mb-4">
                <thead>
                  <tr>
                    <th class="px-4 py-2 border-b">Turno</th>
                    <th class="px-4 py-2 border-b">${formatDate(weekDates[days.indexOf(day)], day)}</th>
                  </tr>
                </thead>
                <tbody>
                  ${turnos.map(turno => `
                    <tr>
                      <td class="px-4 py-2 border-b">${turno}</td>
                      <td class="px-4 py-2 border-b">
                        ${Array.from({ length: 4 }).map((_, index) => {
                          const value = weekData[`${day}-${turno}-${index}`] || '';
                          return `<div>${value}</div>`;
                        }).join('')}
                      </td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          `).join('')}
        </div>
      `;
    };

    document.addEventListener('DOMContentLoaded', () => {
      const prevWeekBtn = document.getElementById('prevWeekBtn');
      const nextWeekBtn = document.getElementById('nextWeekBtn');

      prevWeekBtn.addEventListener('click', () => {
        weekOffset--;
        updateWeek();
      });

      nextWeekBtn.addEventListener('click', () => {
        weekOffset++;
        updateWeek();
      });

      // Initial load
      updateWeek();

      // Navigation buttons for mobile view
      const dayButtons = document.querySelectorAll('.day-btn');
      dayButtons.forEach(button => {
        button.addEventListener('click', () => {
          const day = (button as HTMLElement).dataset.day;
          const dayElement = document.querySelector(`td[data-day="${day}"]`) as HTMLElement;
          dayElement.scrollIntoView({ behavior: 'smooth' });
        });
      });
    });
  </script>
</Layout>


  
  
